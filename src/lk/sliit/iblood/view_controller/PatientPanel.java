/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.sliit.iblood.view_controller;

import lk.sliit.iblood.business.BOFactory;
import lk.sliit.iblood.business.BOType;
import lk.sliit.iblood.business.custom.BloodGroupBO;
import lk.sliit.iblood.business.custom.DonorBO;
import lk.sliit.iblood.business.custom.PatientBO;
import lk.sliit.iblood.common.*;
import lk.sliit.iblood.common.strings.Strings;
import lk.sliit.iblood.model.BloodDTO;
import lk.sliit.iblood.model.BloodGroupDTO;
import lk.sliit.iblood.model.DonorDTO;
import lk.sliit.iblood.model.PatientDTO;

import javax.swing.table.DefaultTableModel;
import java.util.List;

/**
 * @author pandu
 */
public class PatientPanel extends javax.swing.JPanel {

    private PatientBO patientBO = BOFactory.getInstance().getBO(BOType.PATIENT);
    private DonorBO donorBO = BOFactory.getInstance().getBO(BOType.DONOR);
    private BloodGroupBO bloodGroupBO = BOFactory.getInstance().getBO(BOType.BLOOD_GROUP);
    private List<DonorDTO>
            donorDTOS;
    private BloodDTO bloodDTO;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchDonor;
    private javax.swing.JButton btnSelectDonor;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<lk.sliit.iblood.model.BloodGroupDTO> comboBloodType;
    private javax.swing.JComboBox<lk.sliit.iblood.common.Gender> comboGender;
    private datechooser.beans.DateChooserCombo dateDOB;
    private datechooser.beans.DateChooserCombo dateRequestDate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblHead;
    private javax.swing.JTable tblDonorList;
    private javax.swing.JTable tblPateintList;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSelectDonor;
    public PatientPanel() {
        initComponents();
        loadGenders();
        try {
            loadBloodTypes();
            loadPatients();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadPatients() throws Exception {
        Tools.removeRowsFromJTable(((DefaultTableModel) tblPateintList.getModel()));
                patientBO.getAllPatients().forEach(patientDTO -> {
            ((DefaultTableModel) tblPateintList.getModel()).addRow(patientDTO.toStringArray_ID_Name_DOB_Gender_BloodGroup_Donation_Id());
        });
    }

    private void loadBloodTypes() throws Exception {
        List<BloodGroupDTO> allBloodGroups = bloodGroupBO.getAllBloodGroups();
        allBloodGroups.forEach(bloodGroupDTO -> comboBloodType.addItem(bloodGroupDTO));
    }

    private void loadGenders() {
        comboGender.addItem(Gender.MALE);
        comboGender.addItem(Gender.FEMALE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHead = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        dateDOB = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtSelectDonor = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPateintList = new javax.swing.JTable();
        comboBloodType = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        comboGender = new javax.swing.JComboBox<>();
        btnSearchDonor = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDonorList = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        dateRequestDate = new datechooser.beans.DateChooserCombo();
        jLabel7 = new javax.swing.JLabel();
        btnSelectDonor = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));

        lblHead.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblHead.setText("Patient");

        btnSearch.setBackground(new java.awt.Color(51, 51, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Search_15px.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setMaximumSize(new java.awt.Dimension(87, 23));
        btnSearch.setMinimumSize(new java.awt.Dimension(87, 23));
        btnSearch.setPreferredSize(new java.awt.Dimension(87, 23));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        dateDOB.setFormat(2);

        jLabel2.setText("Id<Auto generate>:");

        jLabel3.setText("Name:");

        jLabel5.setText("Blood group:");

        jLabel4.setText("Birthday:");

        btnSave.setBackground(new java.awt.Color(51, 255, 51));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Save_15px.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(87, 23));
        btnSave.setMinimumSize(new java.awt.Dimension(87, 23));
        btnSave.setPreferredSize(new java.awt.Dimension(87, 23));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 153, 0));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Update_15px.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Delete_15px.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setMaximumSize(new java.awt.Dimension(87, 23));
        btnDelete.setMinimumSize(new java.awt.Dimension(87, 23));
        btnDelete.setPreferredSize(new java.awt.Dimension(87, 23));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblPateintList.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Pateint Id", "Name", "Date of birth", "Gender", "Blood Group", "Donation ID"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tblPateintList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(tblPateintList);
        if (tblPateintList.getColumnModel().getColumnCount() > 0) {
            tblPateintList.getColumnModel().getColumn(0).setResizable(false);
            tblPateintList.getColumnModel().getColumn(1).setResizable(false);
            tblPateintList.getColumnModel().getColumn(2).setResizable(false);
            tblPateintList.getColumnModel().getColumn(3).setResizable(false);
            tblPateintList.getColumnModel().getColumn(4).setResizable(false);
            tblPateintList.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel8.setText("Gender:");

        comboGender.setEditable(true);

        btnSearchDonor.setBackground(new java.awt.Color(51, 51, 255));
        btnSearchDonor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Search_15px.png"))); // NOI18N
        btnSearchDonor.setText("Search donor");
        btnSearchDonor.setMaximumSize(new java.awt.Dimension(87, 23));
        btnSearchDonor.setMinimumSize(new java.awt.Dimension(87, 23));
        btnSearchDonor.setPreferredSize(new java.awt.Dimension(87, 23));
        btnSearchDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDonorActionPerformed(evt);
            }
        });

        tblDonorList.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Donor Id", " Name", "Date of birth", "Age"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tblDonorList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(tblDonorList);
        if (tblDonorList.getColumnModel().getColumnCount() > 0) {
            tblDonorList.getColumnModel().getColumn(0).setResizable(false);
            tblDonorList.getColumnModel().getColumn(1).setResizable(false);
            tblDonorList.getColumnModel().getColumn(2).setResizable(false);
            tblDonorList.getColumnModel().getColumn(3).setResizable(false);
            tblDonorList.getColumnModel().getColumn(3).setHeaderValue("Address");
        }

        jLabel9.setText("Select donor by ID:");

        jLabel7.setText("Birthday:");

        btnSelectDonor.setBackground(new java.awt.Color(51, 51, 255));
        btnSelectDonor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/sliit/iblood/assets/Search_15px.png"))); // NOI18N
        btnSelectDonor.setText("Select donor");
        btnSelectDonor.setMaximumSize(new java.awt.Dimension(87, 23));
        btnSelectDonor.setMinimumSize(new java.awt.Dimension(87, 23));
        btnSelectDonor.setPreferredSize(new java.awt.Dimension(87, 23));
        btnSelectDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDonorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(74, 74, 74)
                                                .addComponent(dateRequestDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(lblHead))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jLabel3)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(dateDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(comboGender, javax.swing.GroupLayout.Alignment.LEADING, 0, 300, Short.MAX_VALUE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(comboBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(btnSearchDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(txtSelectDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(btnSelectDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnUpdate)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lblHead)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(dateDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(dateRequestDate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSearchDonor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtSelectDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSelectDonor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnUpdate)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            if (isTxtIdIsNotEmpty()) {
                PatientDTO patient = patientBO.searchPatient(txtId.getText().trim());
                setOnTextFields(patient);
            }
        } catch (NullPointerException e) {
            OptionPane.showNotDone(Strings.MESSAGE_PROBLEM_CANNOT_FIND_RECORD);
        } catch (Exception e) {
            OptionPane.showError(Strings.MESSAGE_ERROR_OCCURRED_BY_EXCEPTION_WHEN_FETCHING_VALUES);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private boolean isTxtIdIsNotEmpty() {
        if (!Validator.isInteger(txtId.getText())) {
            OptionPane.showError(Strings.MESSAGE_PROBLEM_PLEASE_FILL_ID);
            return false;
        } else return true;
    }

    private void setOnTextFields(PatientDTO dto) {
        txtId.setText(dto.getPatientId().toString());
        txtName.setText(dto.getPatientName());
        dateDOB.setSelectedDate(Tools.toCalendar(dto.getPatientDOB()));
        txtSelectDonor.setText(dto.getDonorDTO().getDonorId().toString());
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            PatientDTO validate = new PatientDTO(
                    txtName.getText(),
                    dateDOB.getSelectedDate().getTime(),
                    (Gender) comboGender.getSelectedItem(),
                    (BloodGroupDTO) comboBloodType.getSelectedItem(),
                    bloodDTO,
                    dateRequestDate.getSelectedDate().getTime()
            ).validateAndReturn();
            loadPatients();
            if (OptionPane.confirmAsInfo(Strings.ASK_SHOULD_VALUES_BE_ADDED).equals(OptionPane.YES) &&
                    patientBO.savePatient(validate)) {
                OptionPane.showDoneMessage(Strings.MESSAGE_SUCCESSFULLY_ADDED_VALUE);
                clearAllTextFields();
            }

        } catch (ValidationException e) {
            OptionPane.showNotDone(e.getMessage());
        } catch (Exception e) {
            OptionPane.showError(Strings.MESSAGE_PROBLEM_OCCURRED_BY_EXCEPTION_WHEN_ADDING_VALUES);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void clearAllTextFields() {
        Tools.clearTextOfJTextField(txtName, txtId, txtSelectDonor);
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
//        try {
//
//            NurseDTO validate = new NurseDTO(
//                    txtId.getText(),
//                    txtName.getText(),
//                    txtLName.getText(),
//                    txtSelectDonor.getText(),
//                    dateDOB.getSelectedDate().getTime(),
//                    txtaAddress.getText()
//            ).validateWithPKeyAndReturn();
//
//            nurseBO.searchNurse(txtId.getText());
//            clearAllTextFields();
//            if (OptionPane.confirmAsInfo(Strings.ASK_SHOULD_VALUES_BE_UPDATED).equals(OptionPane.YES) &&
//                    nurseBO.updateNurse(validate)) {
//                OptionPane.showDoneMessage(Strings.MESSAGE_SUCCESSFULLY_ADDED_VALUE);
//                loadNurseList();
//            }
//
//        } catch (NoSuchElementException e) {
//            OptionPane.showNotDone(Strings.MESSAGE_PROBLEM_NO_SUCH_ELEMENT_WITH_ID);
//        } catch (ValidationException e) {
//            OptionPane.showNotDone(e.getMessage());
//        } catch (Exception e) {
//            OptionPane.showError(Strings.MESSAGE_PROBLEM_OCCURRED_BY_EXCEPTION_WHEN_ADDING_VALUES);
//            e.printStackTrace();
//
//        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

//        try {
//            if (isTxtIdIsNotEmpty()) {
//                Integer nurseId = nurseBO.searchNurse(txtId.getText()).getNurseId();
//                if (OptionPane.confirmAsInfo(Strings.ASK_SHOULD_VALUES_BE_DELETED).equals(OptionPane.YES) &&
//                        nurseBO.deleteNurse(nurseId)) {
//                    OptionPane.showDoneMessage(Strings.MESSAGE_SUCCESSFULLY_DELETED_VALUE);
//                    clearAllTextFields();
//                    loadNurseList();
//                }
//            }
//        } catch (NoSuchElementException e) {
//            OptionPane.showNotDone(Strings.MESSAGE_PROBLEM_NO_SUCH_ELEMENT_WITH_ID);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnSearchDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDonorActionPerformed
        BloodGroupDTO bloodGroupDTO = (BloodGroupDTO) comboBloodType.getSelectedItem();
        assert bloodGroupDTO != null;

        try {
            donorDTOS = donorBO.getDonorsWhoHaveThisBloodGroupDoNotHavePatient(bloodGroupDTO.getBloodGroupId());
        } catch (Exception e) {
            e.printStackTrace();
        }
        donorDTOS.forEach(
                donorDTO -> ((DefaultTableModel) tblDonorList.getModel()).addRow(donorDTO.toStringArrayWith_ID_Name_DOB_Address())
        );

    }//GEN-LAST:event_btnSearchDonorActionPerformed

    private void btnSelectDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDonorActionPerformed
        if (!Validator.isInteger(txtSelectDonor.getText()))
            OptionPane.showError(Strings.MESSAGE_ERROR_ID_IS_INVALID);
        else {
            Integer id = Integer.valueOf(txtSelectDonor.getText());
            donorDTOS.forEach(donorDTO -> {
                if (donorDTO.getDonorId().equals(id)) {
                    bloodDTO = new BloodDTO();
                    bloodDTO.setBloodId(donorDTO.getBloodId());
                }
            });
        }
    }//GEN-LAST:event_btnSelectDonorActionPerformed
    // End of variables declaration//GEN-END:variables
}
